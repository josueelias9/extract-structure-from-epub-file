import requests
import json
from typing import List


class AIAgent:
    """AI Agent for text simplification and summarization using Ollama"""
    
    def __init__(self, ollama_host: str = "http://ollama:11434"):
        self.ollama_host = ollama_host
        self.endpoint = f"{ollama_host}/api/chat"
        self.model = "llama3.2"
        
        self.system_prompt = """# Entity
You are an expert in simplifying and summarizing technical texts.
Your task is to create concise, clear, and accurate summaries of the content provided to you.

# Rules
- Remove redundancies and unnecessary details
- Use clear and direct language. Be very straightforward
- Give the summary inmediately without any preamble or additional commentary
- This information will be placed in slides, so be concise and to the point
- Use bullet points. Use max three of them.
- use markdown formatting where appropriate, including bold and italics for emphasis
- DO NOT use "#" headings or titles

# Examples

* **Concept 1**: very short summary
* **Concept 2**: very short summary
    * **Concept 3**: This is a sub-point explaining concept 3 in a concise manner (if needed, not mandatory)

"""
    
    def summarize_content(self, content: str) -> str:
        """
        Generate a summary of the provided content
        
        Args:
            content: Text to summarize (can include HTML)
            
        Returns:
            str: Summary generated by the AI
        """
        if not content or not content.strip():
            return ""
        
        
        # If content is very short, it doesn't need a summary
        if len(content.split()) < 20:
            return content

        payload = {
            "model": self.model,
            "messages": [
                {
                    "role": "system",
                    "content": self.system_prompt
                },
                {
                    "role": "user",
                    "content": f"Summarize the following content concisely:\n\n{content}"
                }
            ],
            "stream": False
        }
        
        try:
            response = requests.post(
                self.endpoint,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=120  # 2 minutes timeout
            )
            response.raise_for_status()
            
            result = response.json()
            summary = result.get("message", {}).get("content", "")
            
            return summary.strip()
            
        except requests.exceptions.RequestException as e:
            print(f"Error communicating with Ollama: {e}")
            return f"[Error generating summary: {str(e)}]"
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON response: {e}")
            return "[Error: Invalid server response]"
        except Exception as e:
            print(f"Unexpected error: {e}")
            return f"[Unexpected error: {str(e)}]"
    
    def summarize_batch(self, contents: List[str]) -> List[str]:
        """
        Generate summaries for multiple contents
        
        Args:
            contents: List of texts to summarize
            
        Returns:
            List[str]: List of generated summaries
        """
        summaries = []
        for i, content in enumerate(contents):
            print(f"Processing summary {i+1}/{len(contents)}...")
            summary = self.summarize_content(content)
            summaries.append(summary)
        return summaries
    
    def test_connection(self) -> bool:
        """
        Test connection with Ollama server
        
        Returns:
            bool: True if connection is successful
        """
        try:
            response = requests.get(f"{self.ollama_host}/api/tags", timeout=5)
            response.raise_for_status()
            print("✓ Successful connection to Ollama")
            return True
        except Exception as e:
            print(f"✗ Connection error with Ollama: {e}")
            return False


# Usage example
if __name__ == "__main__":
    agent = AIAgent()
    
    # Test connection
    if agent.test_connection():
        # Test summary with clean text (no HTML)
        test_content = """
        Google Cloud Storage is a service for storing your objects in Google Cloud. 
        You can use GCS for storing image, video, audio, and unstructured data. 
        You can combine these individual data types into large files of size at least 100 MB 
        and in between 100 to 10,000 shards to improve read and write throughput.
        """
        
        summary = agent.summarize_content(test_content)
        print("\n--- Generated Summary ---")
        print(summary)